// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-data-front/obj"
)

type FakeScannerHandler struct {
	OnCommentStub        func(comment string) error
	onCommentMutex       sync.RWMutex
	onCommentArgsForCall []struct {
		comment string
	}
	onCommentReturns struct {
		result1 error
	}
	OnMaterialLibraryStub        func(path string) error
	onMaterialLibraryMutex       sync.RWMutex
	onMaterialLibraryArgsForCall []struct {
		path string
	}
	onMaterialLibraryReturns struct {
		result1 error
	}
	OnMaterialReferenceStub        func(name string) error
	onMaterialReferenceMutex       sync.RWMutex
	onMaterialReferenceArgsForCall []struct {
		name string
	}
	onMaterialReferenceReturns struct {
		result1 error
	}
	OnVertexStartStub        func() error
	onVertexStartMutex       sync.RWMutex
	onVertexStartArgsForCall []struct{}
	onVertexStartReturns struct {
		result1 error
	}
	OnVertexXStub        func(x float32) error
	onVertexXMutex       sync.RWMutex
	onVertexXArgsForCall []struct {
		x float32
	}
	onVertexXReturns struct {
		result1 error
	}
	OnVertexYStub        func(y float32) error
	onVertexYMutex       sync.RWMutex
	onVertexYArgsForCall []struct {
		y float32
	}
	onVertexYReturns struct {
		result1 error
	}
	OnVertexZStub        func(z float32) error
	onVertexZMutex       sync.RWMutex
	onVertexZArgsForCall []struct {
		z float32
	}
	onVertexZReturns struct {
		result1 error
	}
	OnVertexWStub        func(w float32) error
	onVertexWMutex       sync.RWMutex
	onVertexWArgsForCall []struct {
		w float32
	}
	onVertexWReturns struct {
		result1 error
	}
	OnVertexEndStub        func() error
	onVertexEndMutex       sync.RWMutex
	onVertexEndArgsForCall []struct{}
	onVertexEndReturns struct {
		result1 error
	}
	OnTexCoordStartStub        func() error
	onTexCoordStartMutex       sync.RWMutex
	onTexCoordStartArgsForCall []struct{}
	onTexCoordStartReturns struct {
		result1 error
	}
	OnTexCoordUStub        func(u float32) error
	onTexCoordUMutex       sync.RWMutex
	onTexCoordUArgsForCall []struct {
		u float32
	}
	onTexCoordUReturns struct {
		result1 error
	}
	OnTexCoordVStub        func(v float32) error
	onTexCoordVMutex       sync.RWMutex
	onTexCoordVArgsForCall []struct {
		v float32
	}
	onTexCoordVReturns struct {
		result1 error
	}
	OnTexCoordWStub        func(w float32) error
	onTexCoordWMutex       sync.RWMutex
	onTexCoordWArgsForCall []struct {
		w float32
	}
	onTexCoordWReturns struct {
		result1 error
	}
	OnTexCoordEndStub        func() error
	onTexCoordEndMutex       sync.RWMutex
	onTexCoordEndArgsForCall []struct{}
	onTexCoordEndReturns struct {
		result1 error
	}
	OnNormalStub        func(x, y, z float32) error
	onNormalMutex       sync.RWMutex
	onNormalArgsForCall []struct {
		x float32
		y float32
		z float32
	}
	onNormalReturns struct {
		result1 error
	}
	OnObjectStub        func(name string) error
	onObjectMutex       sync.RWMutex
	onObjectArgsForCall []struct {
		name string
	}
	onObjectReturns struct {
		result1 error
	}
	OnFaceStartStub        func() error
	onFaceStartMutex       sync.RWMutex
	onFaceStartArgsForCall []struct{}
	onFaceStartReturns struct {
		result1 error
	}
	OnCoordReferenceStartStub        func() error
	onCoordReferenceStartMutex       sync.RWMutex
	onCoordReferenceStartArgsForCall []struct{}
	onCoordReferenceStartReturns struct {
		result1 error
	}
	OnVertexIndexStub        func(index int) error
	onVertexIndexMutex       sync.RWMutex
	onVertexIndexArgsForCall []struct {
		index int
	}
	onVertexIndexReturns struct {
		result1 error
	}
	OnTexCoordIndexStub        func(index int) error
	onTexCoordIndexMutex       sync.RWMutex
	onTexCoordIndexArgsForCall []struct {
		index int
	}
	onTexCoordIndexReturns struct {
		result1 error
	}
	OnNormalIndexStub        func(index int) error
	onNormalIndexMutex       sync.RWMutex
	onNormalIndexArgsForCall []struct {
		index int
	}
	onNormalIndexReturns struct {
		result1 error
	}
	OnCoordReferenceEndStub        func() error
	onCoordReferenceEndMutex       sync.RWMutex
	onCoordReferenceEndArgsForCall []struct{}
	onCoordReferenceEndReturns struct {
		result1 error
	}
	OnFaceEndStub        func() error
	onFaceEndMutex       sync.RWMutex
	onFaceEndArgsForCall []struct{}
	onFaceEndReturns struct {
		result1 error
	}
}

func (fake *FakeScannerHandler) OnComment(comment string) error {
	fake.onCommentMutex.Lock()
	fake.onCommentArgsForCall = append(fake.onCommentArgsForCall, struct {
		comment string
	}{comment})
	fake.onCommentMutex.Unlock()
	if fake.OnCommentStub != nil {
		return fake.OnCommentStub(comment)
	} else {
		return fake.onCommentReturns.result1
	}
}

func (fake *FakeScannerHandler) OnCommentCallCount() int {
	fake.onCommentMutex.RLock()
	defer fake.onCommentMutex.RUnlock()
	return len(fake.onCommentArgsForCall)
}

func (fake *FakeScannerHandler) OnCommentArgsForCall(i int) string {
	fake.onCommentMutex.RLock()
	defer fake.onCommentMutex.RUnlock()
	return fake.onCommentArgsForCall[i].comment
}

func (fake *FakeScannerHandler) OnCommentReturns(result1 error) {
	fake.OnCommentStub = nil
	fake.onCommentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnMaterialLibrary(path string) error {
	fake.onMaterialLibraryMutex.Lock()
	fake.onMaterialLibraryArgsForCall = append(fake.onMaterialLibraryArgsForCall, struct {
		path string
	}{path})
	fake.onMaterialLibraryMutex.Unlock()
	if fake.OnMaterialLibraryStub != nil {
		return fake.OnMaterialLibraryStub(path)
	} else {
		return fake.onMaterialLibraryReturns.result1
	}
}

func (fake *FakeScannerHandler) OnMaterialLibraryCallCount() int {
	fake.onMaterialLibraryMutex.RLock()
	defer fake.onMaterialLibraryMutex.RUnlock()
	return len(fake.onMaterialLibraryArgsForCall)
}

func (fake *FakeScannerHandler) OnMaterialLibraryArgsForCall(i int) string {
	fake.onMaterialLibraryMutex.RLock()
	defer fake.onMaterialLibraryMutex.RUnlock()
	return fake.onMaterialLibraryArgsForCall[i].path
}

func (fake *FakeScannerHandler) OnMaterialLibraryReturns(result1 error) {
	fake.OnMaterialLibraryStub = nil
	fake.onMaterialLibraryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnMaterialReference(name string) error {
	fake.onMaterialReferenceMutex.Lock()
	fake.onMaterialReferenceArgsForCall = append(fake.onMaterialReferenceArgsForCall, struct {
		name string
	}{name})
	fake.onMaterialReferenceMutex.Unlock()
	if fake.OnMaterialReferenceStub != nil {
		return fake.OnMaterialReferenceStub(name)
	} else {
		return fake.onMaterialReferenceReturns.result1
	}
}

func (fake *FakeScannerHandler) OnMaterialReferenceCallCount() int {
	fake.onMaterialReferenceMutex.RLock()
	defer fake.onMaterialReferenceMutex.RUnlock()
	return len(fake.onMaterialReferenceArgsForCall)
}

func (fake *FakeScannerHandler) OnMaterialReferenceArgsForCall(i int) string {
	fake.onMaterialReferenceMutex.RLock()
	defer fake.onMaterialReferenceMutex.RUnlock()
	return fake.onMaterialReferenceArgsForCall[i].name
}

func (fake *FakeScannerHandler) OnMaterialReferenceReturns(result1 error) {
	fake.OnMaterialReferenceStub = nil
	fake.onMaterialReferenceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnVertexStart() error {
	fake.onVertexStartMutex.Lock()
	fake.onVertexStartArgsForCall = append(fake.onVertexStartArgsForCall, struct{}{})
	fake.onVertexStartMutex.Unlock()
	if fake.OnVertexStartStub != nil {
		return fake.OnVertexStartStub()
	} else {
		return fake.onVertexStartReturns.result1
	}
}

func (fake *FakeScannerHandler) OnVertexStartCallCount() int {
	fake.onVertexStartMutex.RLock()
	defer fake.onVertexStartMutex.RUnlock()
	return len(fake.onVertexStartArgsForCall)
}

func (fake *FakeScannerHandler) OnVertexStartReturns(result1 error) {
	fake.OnVertexStartStub = nil
	fake.onVertexStartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnVertexX(x float32) error {
	fake.onVertexXMutex.Lock()
	fake.onVertexXArgsForCall = append(fake.onVertexXArgsForCall, struct {
		x float32
	}{x})
	fake.onVertexXMutex.Unlock()
	if fake.OnVertexXStub != nil {
		return fake.OnVertexXStub(x)
	} else {
		return fake.onVertexXReturns.result1
	}
}

func (fake *FakeScannerHandler) OnVertexXCallCount() int {
	fake.onVertexXMutex.RLock()
	defer fake.onVertexXMutex.RUnlock()
	return len(fake.onVertexXArgsForCall)
}

func (fake *FakeScannerHandler) OnVertexXArgsForCall(i int) float32 {
	fake.onVertexXMutex.RLock()
	defer fake.onVertexXMutex.RUnlock()
	return fake.onVertexXArgsForCall[i].x
}

func (fake *FakeScannerHandler) OnVertexXReturns(result1 error) {
	fake.OnVertexXStub = nil
	fake.onVertexXReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnVertexY(y float32) error {
	fake.onVertexYMutex.Lock()
	fake.onVertexYArgsForCall = append(fake.onVertexYArgsForCall, struct {
		y float32
	}{y})
	fake.onVertexYMutex.Unlock()
	if fake.OnVertexYStub != nil {
		return fake.OnVertexYStub(y)
	} else {
		return fake.onVertexYReturns.result1
	}
}

func (fake *FakeScannerHandler) OnVertexYCallCount() int {
	fake.onVertexYMutex.RLock()
	defer fake.onVertexYMutex.RUnlock()
	return len(fake.onVertexYArgsForCall)
}

func (fake *FakeScannerHandler) OnVertexYArgsForCall(i int) float32 {
	fake.onVertexYMutex.RLock()
	defer fake.onVertexYMutex.RUnlock()
	return fake.onVertexYArgsForCall[i].y
}

func (fake *FakeScannerHandler) OnVertexYReturns(result1 error) {
	fake.OnVertexYStub = nil
	fake.onVertexYReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnVertexZ(z float32) error {
	fake.onVertexZMutex.Lock()
	fake.onVertexZArgsForCall = append(fake.onVertexZArgsForCall, struct {
		z float32
	}{z})
	fake.onVertexZMutex.Unlock()
	if fake.OnVertexZStub != nil {
		return fake.OnVertexZStub(z)
	} else {
		return fake.onVertexZReturns.result1
	}
}

func (fake *FakeScannerHandler) OnVertexZCallCount() int {
	fake.onVertexZMutex.RLock()
	defer fake.onVertexZMutex.RUnlock()
	return len(fake.onVertexZArgsForCall)
}

func (fake *FakeScannerHandler) OnVertexZArgsForCall(i int) float32 {
	fake.onVertexZMutex.RLock()
	defer fake.onVertexZMutex.RUnlock()
	return fake.onVertexZArgsForCall[i].z
}

func (fake *FakeScannerHandler) OnVertexZReturns(result1 error) {
	fake.OnVertexZStub = nil
	fake.onVertexZReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnVertexW(w float32) error {
	fake.onVertexWMutex.Lock()
	fake.onVertexWArgsForCall = append(fake.onVertexWArgsForCall, struct {
		w float32
	}{w})
	fake.onVertexWMutex.Unlock()
	if fake.OnVertexWStub != nil {
		return fake.OnVertexWStub(w)
	} else {
		return fake.onVertexWReturns.result1
	}
}

func (fake *FakeScannerHandler) OnVertexWCallCount() int {
	fake.onVertexWMutex.RLock()
	defer fake.onVertexWMutex.RUnlock()
	return len(fake.onVertexWArgsForCall)
}

func (fake *FakeScannerHandler) OnVertexWArgsForCall(i int) float32 {
	fake.onVertexWMutex.RLock()
	defer fake.onVertexWMutex.RUnlock()
	return fake.onVertexWArgsForCall[i].w
}

func (fake *FakeScannerHandler) OnVertexWReturns(result1 error) {
	fake.OnVertexWStub = nil
	fake.onVertexWReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnVertexEnd() error {
	fake.onVertexEndMutex.Lock()
	fake.onVertexEndArgsForCall = append(fake.onVertexEndArgsForCall, struct{}{})
	fake.onVertexEndMutex.Unlock()
	if fake.OnVertexEndStub != nil {
		return fake.OnVertexEndStub()
	} else {
		return fake.onVertexEndReturns.result1
	}
}

func (fake *FakeScannerHandler) OnVertexEndCallCount() int {
	fake.onVertexEndMutex.RLock()
	defer fake.onVertexEndMutex.RUnlock()
	return len(fake.onVertexEndArgsForCall)
}

func (fake *FakeScannerHandler) OnVertexEndReturns(result1 error) {
	fake.OnVertexEndStub = nil
	fake.onVertexEndReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnTexCoordStart() error {
	fake.onTexCoordStartMutex.Lock()
	fake.onTexCoordStartArgsForCall = append(fake.onTexCoordStartArgsForCall, struct{}{})
	fake.onTexCoordStartMutex.Unlock()
	if fake.OnTexCoordStartStub != nil {
		return fake.OnTexCoordStartStub()
	} else {
		return fake.onTexCoordStartReturns.result1
	}
}

func (fake *FakeScannerHandler) OnTexCoordStartCallCount() int {
	fake.onTexCoordStartMutex.RLock()
	defer fake.onTexCoordStartMutex.RUnlock()
	return len(fake.onTexCoordStartArgsForCall)
}

func (fake *FakeScannerHandler) OnTexCoordStartReturns(result1 error) {
	fake.OnTexCoordStartStub = nil
	fake.onTexCoordStartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnTexCoordU(u float32) error {
	fake.onTexCoordUMutex.Lock()
	fake.onTexCoordUArgsForCall = append(fake.onTexCoordUArgsForCall, struct {
		u float32
	}{u})
	fake.onTexCoordUMutex.Unlock()
	if fake.OnTexCoordUStub != nil {
		return fake.OnTexCoordUStub(u)
	} else {
		return fake.onTexCoordUReturns.result1
	}
}

func (fake *FakeScannerHandler) OnTexCoordUCallCount() int {
	fake.onTexCoordUMutex.RLock()
	defer fake.onTexCoordUMutex.RUnlock()
	return len(fake.onTexCoordUArgsForCall)
}

func (fake *FakeScannerHandler) OnTexCoordUArgsForCall(i int) float32 {
	fake.onTexCoordUMutex.RLock()
	defer fake.onTexCoordUMutex.RUnlock()
	return fake.onTexCoordUArgsForCall[i].u
}

func (fake *FakeScannerHandler) OnTexCoordUReturns(result1 error) {
	fake.OnTexCoordUStub = nil
	fake.onTexCoordUReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnTexCoordV(v float32) error {
	fake.onTexCoordVMutex.Lock()
	fake.onTexCoordVArgsForCall = append(fake.onTexCoordVArgsForCall, struct {
		v float32
	}{v})
	fake.onTexCoordVMutex.Unlock()
	if fake.OnTexCoordVStub != nil {
		return fake.OnTexCoordVStub(v)
	} else {
		return fake.onTexCoordVReturns.result1
	}
}

func (fake *FakeScannerHandler) OnTexCoordVCallCount() int {
	fake.onTexCoordVMutex.RLock()
	defer fake.onTexCoordVMutex.RUnlock()
	return len(fake.onTexCoordVArgsForCall)
}

func (fake *FakeScannerHandler) OnTexCoordVArgsForCall(i int) float32 {
	fake.onTexCoordVMutex.RLock()
	defer fake.onTexCoordVMutex.RUnlock()
	return fake.onTexCoordVArgsForCall[i].v
}

func (fake *FakeScannerHandler) OnTexCoordVReturns(result1 error) {
	fake.OnTexCoordVStub = nil
	fake.onTexCoordVReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnTexCoordW(w float32) error {
	fake.onTexCoordWMutex.Lock()
	fake.onTexCoordWArgsForCall = append(fake.onTexCoordWArgsForCall, struct {
		w float32
	}{w})
	fake.onTexCoordWMutex.Unlock()
	if fake.OnTexCoordWStub != nil {
		return fake.OnTexCoordWStub(w)
	} else {
		return fake.onTexCoordWReturns.result1
	}
}

func (fake *FakeScannerHandler) OnTexCoordWCallCount() int {
	fake.onTexCoordWMutex.RLock()
	defer fake.onTexCoordWMutex.RUnlock()
	return len(fake.onTexCoordWArgsForCall)
}

func (fake *FakeScannerHandler) OnTexCoordWArgsForCall(i int) float32 {
	fake.onTexCoordWMutex.RLock()
	defer fake.onTexCoordWMutex.RUnlock()
	return fake.onTexCoordWArgsForCall[i].w
}

func (fake *FakeScannerHandler) OnTexCoordWReturns(result1 error) {
	fake.OnTexCoordWStub = nil
	fake.onTexCoordWReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnTexCoordEnd() error {
	fake.onTexCoordEndMutex.Lock()
	fake.onTexCoordEndArgsForCall = append(fake.onTexCoordEndArgsForCall, struct{}{})
	fake.onTexCoordEndMutex.Unlock()
	if fake.OnTexCoordEndStub != nil {
		return fake.OnTexCoordEndStub()
	} else {
		return fake.onTexCoordEndReturns.result1
	}
}

func (fake *FakeScannerHandler) OnTexCoordEndCallCount() int {
	fake.onTexCoordEndMutex.RLock()
	defer fake.onTexCoordEndMutex.RUnlock()
	return len(fake.onTexCoordEndArgsForCall)
}

func (fake *FakeScannerHandler) OnTexCoordEndReturns(result1 error) {
	fake.OnTexCoordEndStub = nil
	fake.onTexCoordEndReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnNormal(x float32, y float32, z float32) error {
	fake.onNormalMutex.Lock()
	fake.onNormalArgsForCall = append(fake.onNormalArgsForCall, struct {
		x float32
		y float32
		z float32
	}{x, y, z})
	fake.onNormalMutex.Unlock()
	if fake.OnNormalStub != nil {
		return fake.OnNormalStub(x, y, z)
	} else {
		return fake.onNormalReturns.result1
	}
}

func (fake *FakeScannerHandler) OnNormalCallCount() int {
	fake.onNormalMutex.RLock()
	defer fake.onNormalMutex.RUnlock()
	return len(fake.onNormalArgsForCall)
}

func (fake *FakeScannerHandler) OnNormalArgsForCall(i int) (float32, float32, float32) {
	fake.onNormalMutex.RLock()
	defer fake.onNormalMutex.RUnlock()
	return fake.onNormalArgsForCall[i].x, fake.onNormalArgsForCall[i].y, fake.onNormalArgsForCall[i].z
}

func (fake *FakeScannerHandler) OnNormalReturns(result1 error) {
	fake.OnNormalStub = nil
	fake.onNormalReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnObject(name string) error {
	fake.onObjectMutex.Lock()
	fake.onObjectArgsForCall = append(fake.onObjectArgsForCall, struct {
		name string
	}{name})
	fake.onObjectMutex.Unlock()
	if fake.OnObjectStub != nil {
		return fake.OnObjectStub(name)
	} else {
		return fake.onObjectReturns.result1
	}
}

func (fake *FakeScannerHandler) OnObjectCallCount() int {
	fake.onObjectMutex.RLock()
	defer fake.onObjectMutex.RUnlock()
	return len(fake.onObjectArgsForCall)
}

func (fake *FakeScannerHandler) OnObjectArgsForCall(i int) string {
	fake.onObjectMutex.RLock()
	defer fake.onObjectMutex.RUnlock()
	return fake.onObjectArgsForCall[i].name
}

func (fake *FakeScannerHandler) OnObjectReturns(result1 error) {
	fake.OnObjectStub = nil
	fake.onObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnFaceStart() error {
	fake.onFaceStartMutex.Lock()
	fake.onFaceStartArgsForCall = append(fake.onFaceStartArgsForCall, struct{}{})
	fake.onFaceStartMutex.Unlock()
	if fake.OnFaceStartStub != nil {
		return fake.OnFaceStartStub()
	} else {
		return fake.onFaceStartReturns.result1
	}
}

func (fake *FakeScannerHandler) OnFaceStartCallCount() int {
	fake.onFaceStartMutex.RLock()
	defer fake.onFaceStartMutex.RUnlock()
	return len(fake.onFaceStartArgsForCall)
}

func (fake *FakeScannerHandler) OnFaceStartReturns(result1 error) {
	fake.OnFaceStartStub = nil
	fake.onFaceStartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnCoordReferenceStart() error {
	fake.onCoordReferenceStartMutex.Lock()
	fake.onCoordReferenceStartArgsForCall = append(fake.onCoordReferenceStartArgsForCall, struct{}{})
	fake.onCoordReferenceStartMutex.Unlock()
	if fake.OnCoordReferenceStartStub != nil {
		return fake.OnCoordReferenceStartStub()
	} else {
		return fake.onCoordReferenceStartReturns.result1
	}
}

func (fake *FakeScannerHandler) OnCoordReferenceStartCallCount() int {
	fake.onCoordReferenceStartMutex.RLock()
	defer fake.onCoordReferenceStartMutex.RUnlock()
	return len(fake.onCoordReferenceStartArgsForCall)
}

func (fake *FakeScannerHandler) OnCoordReferenceStartReturns(result1 error) {
	fake.OnCoordReferenceStartStub = nil
	fake.onCoordReferenceStartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnVertexIndex(index int) error {
	fake.onVertexIndexMutex.Lock()
	fake.onVertexIndexArgsForCall = append(fake.onVertexIndexArgsForCall, struct {
		index int
	}{index})
	fake.onVertexIndexMutex.Unlock()
	if fake.OnVertexIndexStub != nil {
		return fake.OnVertexIndexStub(index)
	} else {
		return fake.onVertexIndexReturns.result1
	}
}

func (fake *FakeScannerHandler) OnVertexIndexCallCount() int {
	fake.onVertexIndexMutex.RLock()
	defer fake.onVertexIndexMutex.RUnlock()
	return len(fake.onVertexIndexArgsForCall)
}

func (fake *FakeScannerHandler) OnVertexIndexArgsForCall(i int) int {
	fake.onVertexIndexMutex.RLock()
	defer fake.onVertexIndexMutex.RUnlock()
	return fake.onVertexIndexArgsForCall[i].index
}

func (fake *FakeScannerHandler) OnVertexIndexReturns(result1 error) {
	fake.OnVertexIndexStub = nil
	fake.onVertexIndexReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnTexCoordIndex(index int) error {
	fake.onTexCoordIndexMutex.Lock()
	fake.onTexCoordIndexArgsForCall = append(fake.onTexCoordIndexArgsForCall, struct {
		index int
	}{index})
	fake.onTexCoordIndexMutex.Unlock()
	if fake.OnTexCoordIndexStub != nil {
		return fake.OnTexCoordIndexStub(index)
	} else {
		return fake.onTexCoordIndexReturns.result1
	}
}

func (fake *FakeScannerHandler) OnTexCoordIndexCallCount() int {
	fake.onTexCoordIndexMutex.RLock()
	defer fake.onTexCoordIndexMutex.RUnlock()
	return len(fake.onTexCoordIndexArgsForCall)
}

func (fake *FakeScannerHandler) OnTexCoordIndexArgsForCall(i int) int {
	fake.onTexCoordIndexMutex.RLock()
	defer fake.onTexCoordIndexMutex.RUnlock()
	return fake.onTexCoordIndexArgsForCall[i].index
}

func (fake *FakeScannerHandler) OnTexCoordIndexReturns(result1 error) {
	fake.OnTexCoordIndexStub = nil
	fake.onTexCoordIndexReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnNormalIndex(index int) error {
	fake.onNormalIndexMutex.Lock()
	fake.onNormalIndexArgsForCall = append(fake.onNormalIndexArgsForCall, struct {
		index int
	}{index})
	fake.onNormalIndexMutex.Unlock()
	if fake.OnNormalIndexStub != nil {
		return fake.OnNormalIndexStub(index)
	} else {
		return fake.onNormalIndexReturns.result1
	}
}

func (fake *FakeScannerHandler) OnNormalIndexCallCount() int {
	fake.onNormalIndexMutex.RLock()
	defer fake.onNormalIndexMutex.RUnlock()
	return len(fake.onNormalIndexArgsForCall)
}

func (fake *FakeScannerHandler) OnNormalIndexArgsForCall(i int) int {
	fake.onNormalIndexMutex.RLock()
	defer fake.onNormalIndexMutex.RUnlock()
	return fake.onNormalIndexArgsForCall[i].index
}

func (fake *FakeScannerHandler) OnNormalIndexReturns(result1 error) {
	fake.OnNormalIndexStub = nil
	fake.onNormalIndexReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnCoordReferenceEnd() error {
	fake.onCoordReferenceEndMutex.Lock()
	fake.onCoordReferenceEndArgsForCall = append(fake.onCoordReferenceEndArgsForCall, struct{}{})
	fake.onCoordReferenceEndMutex.Unlock()
	if fake.OnCoordReferenceEndStub != nil {
		return fake.OnCoordReferenceEndStub()
	} else {
		return fake.onCoordReferenceEndReturns.result1
	}
}

func (fake *FakeScannerHandler) OnCoordReferenceEndCallCount() int {
	fake.onCoordReferenceEndMutex.RLock()
	defer fake.onCoordReferenceEndMutex.RUnlock()
	return len(fake.onCoordReferenceEndArgsForCall)
}

func (fake *FakeScannerHandler) OnCoordReferenceEndReturns(result1 error) {
	fake.OnCoordReferenceEndStub = nil
	fake.onCoordReferenceEndReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScannerHandler) OnFaceEnd() error {
	fake.onFaceEndMutex.Lock()
	fake.onFaceEndArgsForCall = append(fake.onFaceEndArgsForCall, struct{}{})
	fake.onFaceEndMutex.Unlock()
	if fake.OnFaceEndStub != nil {
		return fake.OnFaceEndStub()
	} else {
		return fake.onFaceEndReturns.result1
	}
}

func (fake *FakeScannerHandler) OnFaceEndCallCount() int {
	fake.onFaceEndMutex.RLock()
	defer fake.onFaceEndMutex.RUnlock()
	return len(fake.onFaceEndArgsForCall)
}

func (fake *FakeScannerHandler) OnFaceEndReturns(result1 error) {
	fake.OnFaceEndStub = nil
	fake.onFaceEndReturns = struct {
		result1 error
	}{result1}
}

var _ obj.ScannerHandler = new(FakeScannerHandler)
